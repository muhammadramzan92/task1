[{"D:\\usama client\\task1\\frontend2\\src\\index.js":"1","D:\\usama client\\task1\\frontend2\\src\\App.js":"2","D:\\usama client\\task1\\frontend2\\src\\redux\\store.js":"3","D:\\usama client\\task1\\frontend2\\src\\Components\\Navbar\\AuthContext.jsx":"4","D:\\usama client\\task1\\frontend2\\src\\Components\\Navbar\\navar.js":"5","D:\\usama client\\task1\\frontend2\\src\\protectedRoutes\\userVerification.js":"6","D:\\usama client\\task1\\frontend2\\src\\api\\apiClient.js":"7","D:\\usama client\\task1\\frontend2\\src\\protectedRoutes\\userValidation.js":"8","D:\\usama client\\task1\\frontend2\\src\\Components\\image withtextbox\\imagewithTextbbox.js":"9","D:\\usama client\\task1\\frontend2\\src\\redux\\userCredits.js":"10","D:\\usama client\\task1\\frontend2\\src\\Components\\homeSection\\home.jsx":"11","D:\\usama client\\task1\\frontend2\\src\\Components\\endlogo\\endimage.jsx":"12","D:\\usama client\\task1\\frontend2\\src\\Components\\loginform\\login.jsx":"13","D:\\usama client\\task1\\frontend2\\src\\Components\\redesignhouse\\redesignhouse.jsx":"14","D:\\usama client\\task1\\frontend2\\src\\Components\\footer\\footer.jsx":"15","D:\\usama client\\task1\\frontend2\\src\\Components\\pricing\\pricing.jsx":"16","D:\\usama client\\task1\\frontend2\\src\\Components\\privacy\\privacy.jsx":"17","D:\\usama client\\task1\\frontend2\\src\\Components\\privacy\\terms.jsx":"18","D:\\usama client\\task1\\frontend2\\src\\Components\\image withtextbox\\imgControl.js":"19","D:\\usama client\\task1\\frontend2\\src\\Components\\redesignhouse\\RedesignHouseai.jsx":"20","D:\\usama client\\task1\\frontend2\\src\\Components\\pricing\\paymentapi.jsx":"21","D:\\usama client\\task1\\frontend2\\src\\Components\\LoadingOverlay.jsx":"22","D:\\usama client\\task1\\frontend2\\src\\hooks\\useApi.js":"23"},{"size":1291,"mtime":1698142796000,"results":"24","hashOfConfig":"25"},{"size":3385,"mtime":1697161658000,"results":"26","hashOfConfig":"25"},{"size":816,"mtime":1696338410000,"results":"27","hashOfConfig":"25"},{"size":637,"mtime":1697161682000,"results":"28","hashOfConfig":"25"},{"size":6938,"mtime":1698244933943,"results":"29","hashOfConfig":"25"},{"size":242,"mtime":1696338410000,"results":"30","hashOfConfig":"25"},{"size":497,"mtime":1696338410000,"results":"31","hashOfConfig":"25"},{"size":255,"mtime":1696338410000,"results":"32","hashOfConfig":"25"},{"size":1594,"mtime":1698153280318,"results":"33","hashOfConfig":"25"},{"size":389,"mtime":1696338410000,"results":"34","hashOfConfig":"25"},{"size":1334,"mtime":1696515876000,"results":"35","hashOfConfig":"25"},{"size":843,"mtime":1696421618000,"results":"36","hashOfConfig":"25"},{"size":3014,"mtime":1696964358000,"results":"37","hashOfConfig":"25"},{"size":370,"mtime":1696338410000,"results":"38","hashOfConfig":"25"},{"size":999,"mtime":1696369250000,"results":"39","hashOfConfig":"25"},{"size":11120,"mtime":1697164870000,"results":"40","hashOfConfig":"25"},{"size":12519,"mtime":1696372332000,"results":"41","hashOfConfig":"25"},{"size":18826,"mtime":1696371154000,"results":"42","hashOfConfig":"25"},{"size":2984,"mtime":1696345574000,"results":"43","hashOfConfig":"25"},{"size":18693,"mtime":1698244868241,"results":"44","hashOfConfig":"25"},{"size":370,"mtime":1696969070000,"results":"45","hashOfConfig":"25"},{"size":768,"mtime":1696338410000,"results":"46","hashOfConfig":"25"},{"size":520,"mtime":1696338410000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hwnj9z",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\usama client\\task1\\frontend2\\src\\index.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\App.js",["119","120","121"],[],"D:\\usama client\\task1\\frontend2\\src\\redux\\store.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\Navbar\\AuthContext.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\Navbar\\navar.js",["122","123","124","125"],[],"D:\\usama client\\task1\\frontend2\\src\\protectedRoutes\\userVerification.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\api\\apiClient.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\protectedRoutes\\userValidation.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\image withtextbox\\imagewithTextbbox.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\redux\\userCredits.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\homeSection\\home.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\endlogo\\endimage.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\loginform\\login.jsx",["126","127"],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\redesignhouse\\redesignhouse.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\footer\\footer.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\pricing\\pricing.jsx",["128","129","130","131","132","133","134","135","136","137","138"],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\privacy\\privacy.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\privacy\\terms.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\image withtextbox\\imgControl.js",[],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\redesignhouse\\RedesignHouseai.jsx",["139","140","141","142","143","144","145","146","147","148"],[],"import React, { useState, useCallback } from \"react\";\nimport \"./YourComponent.css\";\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\nimport apiClient from \"../../api/apiClient\";\nimport useApi from \"../../hooks/useApi\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LoadingOverlay from \"../LoadingOverlay\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { storeCredits } from \"../../redux/userCredits\";\nimport { useAuth } from \"../Navbar/AuthContext\";\n\nconst user = JSON.parse(localStorage.getItem(\"googleUser\"))\nconst RedesignComponent = () => {\n  const {user,setUser,refresh,setRefresh}=useAuth()\n  const [selectedImage, setSelectedImage] = useState();\n  const [resultData, setResultData] = useState();\n  const [uploadedImage, setuploadedImage] = useState(null);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [selectedImagesPreview, setSelectedImagesPreview] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState(\"Living Room\");\n  const [apiResponseImages, setApiResponseImages] = useState([]);\n  // const credits = useSelector((state) => state?.credits?.credits);\n  const dispatch = useDispatch()\nconst creditsAvailable=(user?.subscription?.credits>0||user?.subscription?.status===\"active\")?true:false\n  const [imageGridData, setImageGridData] = useState([\n    {\n      id: \"Image 1\",\n      src: process.env.PUBLIC_URL + \"/image5.png\",\n      name: \"Modern\",\n    },\n    {\n      id: \"Image 2\",\n      src: process.env.PUBLIC_URL + \"/image6.png\",\n      name: \"Minimalist\",\n    },\n    {\n      id: \"Image 3\",\n      src: process.env.PUBLIC_URL + \"/image7.png\",\n      name: \"Professional\",\n    },\n    {\n      id: \"Image 4\",\n      src: process.env.PUBLIC_URL + \"/image 8.png\",\n      name: \"Tropical\",\n    },\n    {\n      id: \"Image 5\",\n      src: process.env.PUBLIC_URL + \"/image 9.png\",\n      name: \"Coastal\",\n    },\n    {\n      id: \"Image 6\",\n      src: process.env.PUBLIC_URL + \"/image10.png\",\n      name: \"Vintage\",\n    },\n    {\n      id: \"Image 7\",\n      src: process.env.PUBLIC_URL + \"/image13.png\",\n      name: \"Industrial\",\n    },\n    {\n      id: \"Image 8\",\n      src: process.env.PUBLIC_URL + \"/image11.png\",\n      name: \"Neoclassic\",\n    },\n    {\n      id: \"Image 9\",\n      src: process.env.PUBLIC_URL + \"/image12.png\",\n      name: \"Tribal\",\n    },\n  ]);\n  const rows = [];\n  for (let i = 0; i < imageGridData.length; i += 3) {\n    const row = imageGridData.slice(i, i + 3);\n    rows.push(row);\n  }\n\n  const [draggedImage, setDraggedImage] = useState(null);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (acceptedFiles, e) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          if (file.type.startsWith(\"image/\")) {\n            setDraggedImage(e.target.result);\n            setSelectedImage(e.target.result);\n            // Store the uploaded image file in the uploadedImage state variable\n            setuploadedImage(file);\n            console.log(\"Dragged Image:\", e.target.result);\n          } else {\n            toast.error(\"Invalid file type. Please upload an image.\");\n          }\n        };\n        reader.readAsDataURL(file);\n      }\n    },\n    accept: \"image/*\",\n  });\n  const handleUpload = (e) => {\n    const file = e.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (file.type.startsWith(\"image/\")) {\n          setDraggedImage(reader.result);\n          setSelectedImage(reader.result);\n          setuploadedImage(file);\n        } else {\n          toast.error(\"Invalid file type. Please upload an image.\");\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  ////////////////////////////////////////////////////////////////////////////\n  const toggleImageSelection = (imageId) => {\n    const updatedSelectedImages = [...selectedImages];\n    const updatedSelectedImagesPreview = [...selectedImagesPreview];\n    console.log(imageGridData.getSelected, updatedSelectedImagesPreview);\n    const imageIndex = updatedSelectedImages.indexOf(imageId);\n    const imageGridItem = imageGridData.find((data) => data.name === imageId);\n\n    if (imageIndex !== -1) {\n      updatedSelectedImages.splice(imageIndex, 1);\n      updatedSelectedImagesPreview.splice(imageIndex, 1);\n    } else {\n      if (updatedSelectedImages.length < 1) {\n        updatedSelectedImages.push(imageId);\n        updatedSelectedImagesPreview.push(imageGridItem);\n      }\n    }\n    console.log(updatedSelectedImages, \"sel\");\n    setSelectedImages(updatedSelectedImages);\n    setSelectedImagesPreview(updatedSelectedImagesPreview);\n    setResultData(null);\n  };\n  function handleDownloadAllImages() {\n    // Create a temporary container element\n    const container = document.createElement(\"div\");\n    container.style.display = \"none\";\n\n    // Iterate through the API response images\n    apiResponseImages.forEach((imageUrl, index) => {\n      if (imageUrl) {\n        // If the image URL is defined, create an anchor element for download\n        const anchor = document.createElement(\"a\");\n        anchor.href = imageUrl;\n        anchor.download = `image_${index + 1}.png`;\n        anchor.style.display = \"none\";\n        container.appendChild(anchor);\n        anchor.click();\n      } else {\n        // If the image URL is undefined, show an alert\n        handleAlert(\n          `Image ${index + 1} is undefined and cannot be downloaded.`\n        );\n      }\n    });\n\n    // Clean up the temporary container element\n    document.body.appendChild(container);\n    container.remove();\n  }\n\n  const { request, loading } = useApi((data) =>\n    apiClient.post(\"/interior\", data)\n  );\n  const handleAlert = (message) => {\n    toast.error(message, {\n      position: \"top-right\",\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n  };\n  async function handleSubmit() {\n    if (selectedImages.length === 0) {\n      handleAlert(\"Please select at least one photo before rendering designs.\");\n      return;\n    }\n    if (!uploadedImage) {\n      handleAlert(\"Please upload an image before submitting the form.\");\n      return;\n    }\n\n    const formdata = new FormData();\n    console.log(uploadedImage);\n    console.log(selectedImages);\n    console.log(selectedRoomType);\n    formdata.append(\"image\", uploadedImage); // Include the uploaded image in the form data\n    formdata.append(\"themes\", JSON.stringify(selectedImages)); // Include the selected themes in the form data\n    formdata.append(\"room\", selectedRoomType);\n\n    try {\n      const result = await request(formdata);\n      setRefresh(true)\n      if(!result.ok) return toast.error(result.data.message)\n      // Store the API response images in the state\n      setApiResponseImages(result.data.result.filteredResponses);\n      console.log(\"API Response Images:\", result.data.result);\n      setResultData(result.data.result.filteredResponses);\n      dispatch(storeCredits(result.data.result.updatedUser))\n      localStorage.setItem(\n        \"googleUser\",\n        JSON.stringify(result.data.result.updatedUser)\n      );\n    } catch (error) {\n      console.error(\"API request error:\", error);\n    }\n  }\n  const containerStyle = {\n    alignItems: \"center\",\n    border: \"1px dotted black\",\n    borderRadius: \"10px\",\n  };\n  const containerStyle1 = {\n    alignItems: \"center\",\n    borderRadius: \"10px\",\n  };\n  const responsiveContainerStyle = {\n    ...containerStyle,\n    width: \"100%\",\n    marginRight: \"5.4rem\",\n  };\n  const responsiveContainerStyle1 = {\n    ...containerStyle1,\n    width: \"100%\",\n    marginRight: \"5.4rem\",\n  };\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\" style={{ marginTop: \"2rem\" }}>\n        <LoadingOverlay open={loading} />\n        <div className=\"col-xl-4   col-lg-4  col-md-12 col-sm-12 col-xs-12\">\n          <div className=\"left-box lefttet\">\n            {/* <p>\n              You have no credits left. Buy more here to generate your house.\n            </p> */}\n            <div\n              style={\n                window.innerWidth <= 768\n                  ? responsiveContainerStyle\n                  : containerStyle\n              }\n            >\n              <div\n                style={\n                  window.innerWidth <= 768\n                    ? responsiveContainerStyle1\n                    : containerStyle1\n                }\n              >\n                <div>\n                  {selectedImage ? (\n                    <div className=\"uploaded-image  rounded\">\n                      <img\n                        src={selectedImage}\n                        alt=\"Uploaded\"\n                        style={{\n                          width: \"100%\",\n                          padding: \"32px 10px 10px 10px\",\n                        }}\n                        className=\"rounded\"\n                      />\n                      {selectedImage && (\n                        <>\n                          <button\n                            className=\"delete-image-button\"\n                            style={{\n                              position: \"absolute\",\n                              right: \"25px\",\n                              top: \"8px\",\n                              background: \"none\",\n                              border: \"none\",\n                              color: \"red\",\n                            }}\n                            onClick={() => {\n                              setSelectedImage(null);\n                              setuploadedImage(null);\n                            }}\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"16\"\n                              height=\"16\"\n                              fill=\"currentColor\"\n                              class=\"bi bi-trash-fill\"\n                              viewBox=\"0 0 16 16\"\n                            >\n                              <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\n                            </svg>\n                          </button>\n                          <p\n                            style={{\n                              position: \"absolute\",\n                              // left: \"34px\",\n                              top: \"8px\",\n                            }}\n                          >\n                            Original Room\n                          </p>\n                        </>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"mb-4 mt-4\">\n                      <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }} {...getRootProps()}>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"60\"\n                          height=\"50\"\n                          style={{ marginTop: \"1rem\" }}\n                          fill=\"rgba(0, 159, 227, 1)\"\n                          class=\"bi bi-cloud-upload\"\n                          viewBox=\"0 0 16 16\"\n                        >\n                          <path\n                            fill-rule=\"evenodd\"\n                            d=\"M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z\"\n                          />\n                          <path\n                            fill-rule=\"evenodd\"\n                            d=\"M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z\"\n                          />\n                        </svg>{\" \"}\n\n                        <span style={{fontWeight:'500'}}>Drag and drop Your Image</span>\n                        <span style={{fontWeight:'500',color:'grey'}}>or</span>\n                      </div>\n                      <input id=\"upload\" type=\"file\" style={{ display: 'none' }} onChange={handleUpload} />\n                      <label className=\"upload-button\" htmlFor=\"upload\">\n                        UPLOAD PHOTO\n                      </label>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <p className=\"mt-3\">\n              {\" \"}\n              <span> Select Room type</span>\n            </p>\n\n            <div className=\"dropdown-container\">\n              <select \n                className=\"dropdown\"\n                value={selectedRoomType}\n                onChange={(e) => setSelectedRoomType(e.target.value)}\n              >\n                <option value=\"Living Room\">Living Room</option>\n                <option value=\"Dining Room\">Dining Room</option>\n                <option value=\"BedRoom\">BedRoom</option>\n                <option value=\"Bath Room\">Bath Room</option>\n                <option value=\"Office\">Office</option>\n                <option value=\"Kitchen\">Kitchen</option>\n                <option value=\"Basement\">Basement</option>\n                <option value=\"Arabian Majilis\">Arabian Majilis</option>\n                <option value=\"Outdoor Patio\">Outdoor Patio</option>\n                <option value=\"Gaming Room\">Gaming Room </option>\n              </select>\n            </div>\n            <p className=\"mt-3\">\n              <span>Select Room Themes (up to 1) </span>\n            </p>\n            <ImageGrid\n              rows={rows}\n              creditsAvailable={creditsAvailable}\n              selectedImages={selectedImages}\n              handleSubmit={handleSubmit}\n              toggleImageSelection={toggleImageSelection}\n            />\n          </div>\n        </div>\n        {/* </div><div className=\"col-xl-8  col-lg-8  col-md-12 col-sm-12 col-xs-12\"> */}\n        <div className=\"col\">\n          <div className=\"right-box\">\n            <div className=\"gen-image flex flex-col justify-center items-center\">\n              {selectedImagesPreview.map((imageData, index) => (\n                <Col key={imageData.id} sm={6}>\n                  <div className=\"selected-image\">\n                    {resultData?.length > 0 ? (\n                      <img\n                        src={resultData[index] || \"\"}\n                        alt={\"Image \" + (index + 1)}\n                        className=\"img-fluid\"\n                        style={{\n                          width: \"100%\",\n                          height: \"18rem\",\n                          marginTop: \"0.5rem\",\n                        }}\n                      />\n                    ) : (\n                      <div\n                        className=\"housebox d-flex justify-content-center align-items-center bg-dark rounded\"\n                        \n                      >\n                        <img\n                          src={\n                            process.env.PUBLIC_URL + \"/MMH_logo-removebg.png\"\n                          }\n                          alt={imageData.name}\n                          className=\"img-fluid\"\n                          style={{\n                            width: \"12rem\",\n                          }}\n                        />\n                      </div>\n                    )}\n                    <div className=\"image-text\" style={{ marginTop: \"1.9rem\" }}>\n                      <span style={{ marginLeft: \"2px\" }}>\n                        {imageData.name + \" \"}\n                      </span>\n                      {selectedRoomType ? selectedRoomType : \"Living Room\"}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n              {apiResponseImages.length > 0 && (\n                <Col>\n                  <button onClick={handleDownloadAllImages} className=\"bo mt-5\">\n                    Download Image\n                  </button>\n                </Col>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default RedesignComponent;\n\nconst ImageGrid = ({\n  rows,\n  selectedImages,\n  toggleImageSelection,\n  handleSubmit,\n  creditsAvailable,\n}) => (\n  <div className=\"image-grid\">\n    {rows.map((row, rowIndex) => (\n      <Row key={rowIndex} className=\"image-row\">\n        {row.map((imageData) => (\n          <Col key={imageData.id} xl={4} lg={4} md={4} sm={1} className=\"image-container\">\n            <div className=\"image-wrapper\">\n              <img\n                src={imageData.src}\n                alt={imageData.name}\n                onClick={() => toggleImageSelection(imageData.name)}\n                className={`img-fluid ${selectedImages?.includes(imageData.name)\n                  ? \"selected-image\"\n                  : \"\"\n                  }`}\n              />\n              {selectedImages?.includes(imageData.name) && (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"white\"\n                  className=\"svg-icon\"\n                  style={{ \n                    backgroundColor: \"black\", \n                    color: \"white\" }}\n                >\n                  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                  <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n                </svg>\n              )}\n              <div className=\"image-text\">{imageData.name}</div>\n            </div>\n          </Col>\n        ))}\n      </Row>\n    ))}\n\n    <Row className=\"render\">\n      <Col style={{ display: \"flex\", alignItems: \"center\", marginTop: \"10px\" }}>\n        <Button\n          onClick={handleSubmit}\n          className=\"bo\"\n         \n        >\n          RENDER DESIGNS\n        </Button>\n        <span style={{ color:!creditsAvailable ? \"red\" : \"black\" }} className=\"credits\">Cost : {selectedImages?.length}</span>\n      </Col>\n      <ToastContainer />\n    </Row>\n  </div>\n);\n",[],"D:\\usama client\\task1\\frontend2\\src\\Components\\pricing\\paymentapi.jsx",["149","150"],[],"D:\\usama client\\task1\\frontend2\\src\\Components\\LoadingOverlay.jsx",[],[],"D:\\usama client\\task1\\frontend2\\src\\hooks\\useApi.js",[],[],{"ruleId":"151","severity":1,"message":"152","line":33,"column":8,"nodeType":"153","messageId":"154","endLine":33,"endColumn":12},{"ruleId":"155","severity":1,"message":"156","line":44,"column":42,"nodeType":"157","messageId":"158","endLine":44,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":46,"column":5,"nodeType":"161","endLine":46,"endColumn":14,"suggestions":"162"},{"ruleId":"151","severity":1,"message":"152","line":12,"column":9,"nodeType":"153","messageId":"154","endLine":12,"endColumn":13},{"ruleId":"151","severity":1,"message":"163","line":18,"column":10,"nodeType":"153","messageId":"154","endLine":18,"endColumn":16},{"ruleId":"151","severity":1,"message":"164","line":20,"column":10,"nodeType":"153","messageId":"154","endLine":20,"endColumn":26},{"ruleId":"151","severity":1,"message":"165","line":24,"column":9,"nodeType":"153","messageId":"154","endLine":24,"endColumn":16},{"ruleId":"151","severity":1,"message":"166","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":14},{"ruleId":"151","severity":1,"message":"167","line":13,"column":10,"nodeType":"153","messageId":"154","endLine":13,"endColumn":19},{"ruleId":"151","severity":1,"message":"168","line":4,"column":17,"nodeType":"153","messageId":"154","endLine":4,"endColumn":26},{"ruleId":"151","severity":1,"message":"169","line":6,"column":10,"nodeType":"153","messageId":"154","endLine":6,"endColumn":21},{"ruleId":"151","severity":1,"message":"170","line":10,"column":10,"nodeType":"153","messageId":"154","endLine":10,"endColumn":21},{"ruleId":"151","severity":1,"message":"171","line":11,"column":10,"nodeType":"153","messageId":"154","endLine":11,"endColumn":24},{"ruleId":"151","severity":1,"message":"172","line":13,"column":10,"nodeType":"153","messageId":"154","endLine":13,"endColumn":29},{"ruleId":"151","severity":1,"message":"173","line":14,"column":15,"nodeType":"153","messageId":"154","endLine":14,"endColumn":22},{"ruleId":"151","severity":1,"message":"174","line":14,"column":23,"nodeType":"153","messageId":"154","endLine":14,"endColumn":30},{"ruleId":"151","severity":1,"message":"175","line":14,"column":31,"nodeType":"153","messageId":"154","endLine":14,"endColumn":41},{"ruleId":"155","severity":1,"message":"156","line":16,"column":47,"nodeType":"157","messageId":"158","endLine":16,"endColumn":49},{"ruleId":"155","severity":1,"message":"156","line":17,"column":50,"nodeType":"157","messageId":"158","endLine":17,"endColumn":52},{"ruleId":"151","severity":1,"message":"176","line":34,"column":12,"nodeType":"153","messageId":"154","endLine":34,"endColumn":28},{"ruleId":"151","severity":1,"message":"177","line":1,"column":27,"nodeType":"153","messageId":"154","endLine":1,"endColumn":38},{"ruleId":"151","severity":1,"message":"178","line":3,"column":28,"nodeType":"153","messageId":"154","endLine":3,"endColumn":37},{"ruleId":"151","severity":1,"message":"179","line":10,"column":23,"nodeType":"153","messageId":"154","endLine":10,"endColumn":34},{"ruleId":"151","severity":1,"message":"152","line":14,"column":7,"nodeType":"153","messageId":"154","endLine":14,"endColumn":11},{"ruleId":"151","severity":1,"message":"173","line":16,"column":15,"nodeType":"153","messageId":"154","endLine":16,"endColumn":22},{"ruleId":"151","severity":1,"message":"174","line":16,"column":23,"nodeType":"153","messageId":"154","endLine":16,"endColumn":30},{"ruleId":"151","severity":1,"message":"180","line":27,"column":25,"nodeType":"153","messageId":"154","endLine":27,"endColumn":41},{"ruleId":"151","severity":1,"message":"181","line":80,"column":10,"nodeType":"153","messageId":"154","endLine":80,"endColumn":22},{"ruleId":"151","severity":1,"message":"182","line":82,"column":25,"nodeType":"153","messageId":"154","endLine":82,"endColumn":38},{"ruleId":"151","severity":1,"message":"183","line":82,"column":40,"nodeType":"153","messageId":"154","endLine":82,"endColumn":52},{"ruleId":"151","severity":1,"message":"184","line":1,"column":8,"nodeType":"153","messageId":"154","endLine":1,"endColumn":13},{"ruleId":"151","severity":1,"message":"185","line":6,"column":11,"nodeType":"153","messageId":"154","endLine":6,"endColumn":16},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["186"],"'credit' is assigned a value but never used.","'showLogoutButton' is assigned a value but never used.","'credits' is assigned a value but never used.","'json' is defined but never used.","'userImage' is assigned a value but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'paymentData' is assigned a value but never used.","'newStringState' is assigned a value but never used.","'notificationMessage' is assigned a value but never used.","'setUser' is assigned a value but never used.","'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'showNotification' is defined but never used.","'useCallback' is defined but never used.","'Container' is defined but never used.","'useSelector' is defined but never used.","'setImageGridData' is assigned a value but never used.","'draggedImage' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'isDragActive' is assigned a value but never used.","'axios' is defined but never used.","'token' is assigned a value but never used.",{"desc":"187","fix":"188"},"Update the dependencies array to be: [fetchUserInfo, refresh]",{"range":"189","text":"190"},[1728,1737],"[fetchUserInfo, refresh]"]